{"version":3,"sources":["App.js","../node_modules/express/lib sync","routes/Homepage.js","routes/About_Us.js","routes/FAQ.js","routes/Book_Now.js","routes/Invest.js","routes/Get_Stoked.js","index.js","registerServiceWorker.js"],"names":["require","express","path","cookieParser","logger","favicon","app","use","join","__dirname","set","json","urlencoded","extended","static","Homepage_Router","About_Us_Router","FAQ_Router","Book_Now_Router","Invest_Router","Get_Stoked_Router","err","req","res","next","locals","message","error","get","status","render","sendFile","listen","module","exports","webpackEmptyContext","e","Error","code","keys","resolve","id","router","Router","title","ReactDOM","document","getElementById","navigator","window","addEventListener","swUrl","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch"],"mappings":"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","file":"static/js/main.5fc8cb5f.chunk.js","sourcesContent":["var createError = require('http-errors');\r\nvar express = require('express');\r\nvar path = require('path');\r\nvar cookieParser = require('cookie-parser');\r\nvar logger = require('morgan');\r\nvar favicon = require('serve-favicon');\r\n\r\nvar app = express();\r\n\r\n// Set favicon (website/bookmark icon)\r\napp.use(favicon(path.join(__dirname, 'icon.ico')))\r\n\r\n// view engine setup\r\napp.set('views', path.join(__dirname, 'views'));\r\n//app.set('views', path.join(__dirname, 'views/Homepage.extensions'));\r\napp.set('view engine', 'pug');\r\n\r\napp.use(logger('dev'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\n\r\n// Serve static content (images, videos, scripts) from the 'public' directory\r\napp.use(express.static('public'));\r\n\r\n// Declare webpage routers here\r\n// <ADD HERE FOR A NEW WEBPAGE>\r\nvar Homepage_Router = require('./routes/Homepage.js');\r\nvar About_Us_Router = require('./routes/About_Us.js');\r\nvar FAQ_Router = require('./routes/FAQ.js')\r\nvar Book_Now_Router = require('./routes/Book_Now.js')\r\nvar Invest_Router = require('./routes/Invest.js');\r\nvar Get_Stoked_Router = require('./routes/Get_Stoked.js')\r\n\r\n// Hook up routers to the express app\r\n// <ADD HERE FOR A NEW WEBPAGE>\r\napp.use('/', Homepage_Router);\r\napp.use('/About_Us', About_Us_Router);\r\napp.use('/FAQ', FAQ_Router);\r\napp.use('/Book_Now', Book_Now_Router);\r\napp.use('/Invest', Invest_Router);\r\napp.use('/Get_Stoked', Get_Stoked_Router)\r\n\r\n\r\n// catch 404 and forward to error handler\r\n// app.use(function(req, res, next) {\r\n//   next(createError(404));\r\n//   res.status(404).send(\"Sorry can't find that!\")\r\n// });\r\n\r\n// error handler\r\napp.use(function(err, req, res, next) {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n  res.render('error');\r\n});\r\n\r\napp.use(express.static(path.join(__dirname, 'build')));\r\napp.get('/', function(req, res) {\r\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\r\n});\r\napp.listen(9000);\r\n\r\n\r\nmodule.exports = app;\r\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 215;","var express = require('express');\r\nvar router = express.Router();\r\n\r\n/* GET home page. */\r\nrouter.get('/', function(req, res, next) {\r\n  res.render('Homepage', { title: 'Adrenaline Sports Resort' });\r\n});\r\n\r\nmodule.exports = router;\r\n","var express = require('express');\r\nvar router = express.Router();\r\n\r\n/* GET home page. */\r\nrouter.get('/', function(req, res, next) {\r\n  res.render('About_Us', { title: 'About Us' });\r\n});\r\n\r\nmodule.exports = router;\r\n","var express = require('express');\r\nvar router = express.Router();\r\n\r\n/* GET home page. */\r\nrouter.get('/', function(req, res, next) {\r\n  res.render('FAQ', { title: 'FAQ' });\r\n});\r\n\r\nmodule.exports = router;\r\n","var express = require('express');\r\nvar router = express.Router();\r\n\r\n/* GET home page. */\r\nrouter.get('/', function(req, res, next) {\r\n  res.render('Book_Now', { title: 'Book Now' });\r\n});\r\n\r\nmodule.exports = router;\r\n","var express = require('express');\r\nvar router = express.Router();\r\n\r\n/* GET home page. */\r\nrouter.get('/', function(req, res, next) {\r\n  res.render('Invest', { title: 'Invest' });\r\n});\r\n\r\nmodule.exports = router;\r\n","var express = require('express');\r\nvar router = express.Router();\r\n\r\n/* GET home page. */\r\nrouter.get('/', function(req, res, next) {\r\n  res.render('Get_Stoked', { title: 'GET STOKED' });\r\n});\r\n\r\nmodule.exports = router;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n        navigator.serviceWorker\r\n          .register(swUrl)\r\n          .then(registration => {\r\n            registration.onupdatefound = () => {\r\n              const installingWorker = registration.installing;\r\n              installingWorker.onstatechange = () => {\r\n                if (installingWorker.state === 'installed') {\r\n                  if (navigator.serviceWorker.controller) {\r\n                    // At this point, the old content will have been purged and\r\n                    // the fresh content will have been added to the cache.\r\n                    // It's the perfect time to display a \"New content is\r\n                    // available; please refresh.\" message in your web app.\r\n                    console.log('New content is available; please refresh.');\r\n                  } else {\r\n                    // At this point, everything has been precached.\r\n                    // It's the perfect time to display a\r\n                    // \"Content is cached for offline use.\" message.\r\n                    console.log('Content is cached for offline use.');\r\n                  }\r\n                }\r\n              };\r\n            };\r\n          })\r\n          .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n          });\r\n      });\r\n    }\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }"],"sourceRoot":""}